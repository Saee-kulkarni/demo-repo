gradient discent

current_x=2
rate=0.01
precision=0.000001
previous_step_size=1
max_iters=10
iters=0
df=lambda x: 2*(x+3)

while previous_step_size > precision and iters < max_iters:
  previous_x = current_x
  current_x = current_x - rate*df(previous_x)
  previous_step_size=abs(current_x - previous_x)
  iters = iters+1
  print("Iterations", iters,"\nX value is", current_x)


///////////////////////////////////////////////////////////////////////////
ass1

correlation=data1.corr()
sns.heatmap(correlation, annot=True)
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
x = data1.drop('fare_amount', axis=1)
y = data1['fare_amount']
xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.33, random_state=75)
scalar = StandardScaler()
xtrain = scalar.fit_transform(xtrain)
xtest = scalar.fit_transform(xtest)
from sklearn.linear_model import LinearRegression
linearmodel = LinearRegression()
linearmodel.fit(xtrain, ytrain)
prediction = linearmodel.predict(xtest)
from sklearn.metrics import r2_score, mean_squared_error
print(r2_score(ytest, prediction))
print(mean_squared_error(ytest, prediction))
from sklearn.ensemble import RandomForestRegressor
randomforestregressor.fit(xtrain,ytrain)
print("r2_score:",r2_score(ytest, randomforestprediction))
print("RMSE:",mean_squared_error(ytest, randomforestprediction))



/////////////////////////////////////////////////////////////////////////////////////////////
assi 2


x = data_set.drop(['Prediction'],axis=1)
y = data_set['Prediction']
from sklearn.preprocessing import scale
x = scale(x)
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.3, random_sta
#Fitting K-NN classifier to the training set 
from sklearn.neighbors import KNeighborsClassifier 
classifier= KNeighborsClassifier(n_neighbors=7) 
classifier.fit(x_train, y_train) 
#Predicting the test set result 
y_pred= classifier.predict(x_test) 
print('prediction',y_pred)
#Creating the Confusion matrix 
from sklearn.metrics import confusion_matrix 
cm= confusion_matrix(y_test, y_pred) 
print('accuracy by KNN', cm)]
#SVM Classifier
from sklearn.svm import SVC # "Support vector classifier" 
#cost c=1
model = SVC(C=1)
#fit
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
#Creating the Confusion matrix 
from sklearn.metrics import confusion_matrix 
cm2= confusion_matrix(y_test, y_pred) 
print('SVM', cm2)

/////////////////////////////////////////////////////////////////////////
assi 4(diabites)

